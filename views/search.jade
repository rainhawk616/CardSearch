extends layout

block content
    h1=title
    .col-md-8.col-xs-12
        .form-group
            label Name
            .input-group(data-field='name' data-field-name='Name')
                select.selectpicker.operator
                    option(value='and') And
                    option(value='or') Or
                    option(value='not') Not
                input.form-control.value(type='text' placeholder='Name')
                .input-group-btn
                    a.btn.btn-success.addQuery
                        .glyphicon.glyphicon-plus
        .form-group
            label Oracle Text
            .input-group(data-field='text' data-field-name='Oracle Text')
                select.selectpicker.operator
                    option(value='and') And
                    option(value='or') Or
                    option(value='not') Not
                input.form-control.value(type='text' placeholder='Oracle text')
                .input-group-btn
                    a.btn.btn-success.addQuery
                        .glyphicon.glyphicon-plus
        .form-group
            label Supertype
            .input-group(data-field='supertypes' data-field-name='Supertype')
                select.selectpicker.operator
                    option(value='and') And
                    option(value='or') Or
                    option(value='not') Not
                select.form-control.selectpicker.value#supertype(data-live-search='true' data-none-selected-text='Supertype')
                    option(value='')
                    each supertype in supertypes
                        option #{supertype.description}
                .input-group-btn
                    a.btn.btn-success.addQuery
                        .glyphicon.glyphicon-plus
        .form-group
            label Type
            .input-group(data-field='types' data-field-name='Type')
                select.selectpicker.operator
                    option(value='and') And
                    option(value='or') Or
                    option(value='not') Not
                select.form-control.selectpicker.value#type(data-live-search='true' data-none-selected-text='Type')
                    option(value='')
                    each type in types
                        option #{type.description}
                .input-group-btn
                    a.btn.btn-success.addQuery
                        .glyphicon.glyphicon-plus
        .form-group
            label Subtype
            .input-group(data-field='subtypes' data-field-name='Subtype')
                select.selectpicker.operator
                    option(value='and') And
                    option(value='or') Or
                    option(value='not') Not
                select.form-control.selectpicker.value#subtype(data-live-search='true' data-none-selected-text='Subtype')
                    option(value='')
                    each subtype in subtypes
                        option #{subtype.description}
                .input-group-btn
                    a.btn.btn-success.addQuery
                        .glyphicon.glyphicon-plus
        .form-group
            label Colors (not implemented)
            .input-group(data-field='colors' data-field-name='Colors')
                select.selectpicker.operator
                    option(value='and') And
                    option(value='or') Or
                    option(value='not') Not
                div(style='border: 1px solid #ccc;height:34px;display:flex;justify-content:space-around')
                    span
                        input.ms#red(type='checkbox' autocomplete='off' name='red')
                        label.ms.ms-cost.ms-r.ms-2x(for='red')
                    span
                        input.ms#white(type='checkbox' autocomplete='off')
                        label.ms.ms-cost.ms-w.ms-2x(for='white')
                    span
                        input.ms#green(type='checkbox' autocomplete='off')
                        label.ms.ms-cost.ms-g.ms-2x(for='green')
                    span
                        input.ms#black(type='checkbox' autocomplete='off')
                        label.ms.ms-cost.ms-b.ms-2x(for='black')
                    span
                        input.ms#blue(type='checkbox' autocomplete='off')
                        label.ms.ms-cost.ms-u.ms-2x(for='blue')
                .input-group-btn
                    a.btn.btn-success.addQuery
                        .glyphicon.glyphicon-plus

    .col-md-4.col-xs-12
        //label(for='queryPreview') Query
        //pre#queryPreview
        label(for='queryPreview2') Query 2.0
        div#queryPreview2
        form#form(action='/results' method='post')
            input#query(type='hidden' name='query' value='%7B%7D')
            .form-group.btn-toolbar
                button.btn.btn-primary(type='submit') Search
                a.btn.btn-danger(type='submit' onclick='removeAllClauses();') Clear
    script(type='text/javascript').
        function getQueryJson() {
            return JSON.parse(decodeURIComponent($('#query').val()));
        }

        function setQueryJson(json) {
            $('#query').val(encodeURIComponent(JSON.stringify(json)));
            updateQueryPreview();
        }

        function addClause(event) {
            console.log('event:', event);
            console.log('this:', this);

            var inputGroup = $(this).closest('.input-group');
            var value = inputGroup.find('.value').not('div');

            if (value.val() === undefined || value.val() === null || value.val() === '')
                return;

            var clause = {
                field: inputGroup.data('field'),
                operator: inputGroup.find('.operator.selectpicker').val(),
                comparator: inputGroup.find('.comparator.selectpicker').val(),
                value: value.val()
            };

            value.val('');
            inputGroup.find('.selectpicker.value').selectpicker('val', null);

            var query = getQueryJson();

            if (query === null || query === undefined || query === '')
                query = {};

            query[createGuid()] = clause;

            setQueryJson(query);

            console.log(query);
        }

        function removeClause(uuid) {
            var query = getQueryJson();

            if (query === null || query === undefined || query === '')
                query = {};

            if (query.hasOwnProperty(uuid)) {
                delete query[uuid];
            }

            setQueryJson(query);
        }

        function removeAllClauses() {
            setQueryJson({});
        }

        function updateQueryPreview() {
            $('#queryPreview').text(JSON.stringify(getQueryJson(), null, 2));

            var query = getQueryJson();

            var queryPreview = $('#queryPreview2');

            queryPreview.empty();

            for (var uuid in query) {
                if (query.hasOwnProperty(uuid)) {
                    var clause = query[uuid];

                    var kill = "<a class='glyphicon glyphicon-remove-sign pointer' onclick='removeClause(\"" + uuid + "\")'></a>";
                    var field = clause.field.replace(/\w\S*/g, function (txt) {
                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                    });
                    var operator = clause.operator.toUpperCase();
                    var value = clause.value;
                    var child = '<div class="form-group">' + kill + ' ' + field + ' ' + operator + ' \'' + value + '\'</div>'

                    queryPreview.append(child);

                }
            }
        }


        $(document).ready(function () {
            updateQueryPreview();

            $('.addQuery').click(addClause);


            $('.value').keyup(function (event) {
                if (event.keyCode == 13) {
                    $(this).closest('.input-group').find('.btn.btn-success.addQuery').click();
                }
            });

            $("#form").submit(function (event) {
                $('.addQuery').click();
            });

        });
