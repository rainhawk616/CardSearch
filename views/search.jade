extends layout

block content
    h1=title
    .col-md-8.col-xs-12
        .form-group
            label Color Identity
            .input-group(data-field='coloridentity' data-field-name='Color Identity')
                table
                    tbody
                        tr
                            td
                                p Must have
                            td
                                input.ms.color#and-w(type='radio' autocomplete='off' name='w' data-operator='and')
                                label.ms.ms-cost.ms-w.ms-2x(for='and-w')
                            td
                                input.ms.color#and-u(type='radio' autocomplete='off' name='u' data-operator='and')
                                label.ms.ms-cost.ms-u.ms-2x(for='and-u')
                            td
                                input.ms.color#and-b(type='radio' autocomplete='off' name='b' data-operator='and')
                                label.ms.ms-cost.ms-b.ms-2x(for='and-b')
                            td
                                input.ms.color#and-r(type='radio' autocomplete='off' name='r' data-operator='and')
                                label.ms.ms-cost.ms-r.ms-2x(for='and-r')
                            td
                                input.ms.color#and-g(type='radio' autocomplete='off' name='g' data-operator='and')
                                label.ms.ms-cost.ms-g.ms-2x(for='and-g')
                        tr
                            td
                                p Playable in
                            td
                                input.ms.color#or-w(type='radio' autocomplete='off' name='w' checked data-operator='or')
                                label.ms.ms-cost.ms-w.ms-2x(for='or-w')
                            td
                                input.ms.color#or-u(type='radio' autocomplete='off' name='u' checked data-operator='or')
                                label.ms.ms-cost.ms-u.ms-2x(for='or-u')
                            td
                                input.ms.color#or-b(type='radio' autocomplete='off' name='b' checked data-operator='or')
                                label.ms.ms-cost.ms-b.ms-2x(for='or-b')
                            td
                                input.ms.color#or-r(type='radio' autocomplete='off' name='r' checked data-operator='or')
                                label.ms.ms-cost.ms-r.ms-2x(for='or-r')
                            td
                                input.ms.color#or-g(type='radio' autocomplete='off' name='g' checked data-operator='or')
                                label.ms.ms-cost.ms-g.ms-2x(for='or-g')
                        tr
                            td
                                p Exclude
                            td
                                input.ms.color#not-w(type='radio' autocomplete='off' name='w' data-operator='not')
                                label.ms.ms-cost.ms-w.ms-2x(for='not-w')
                            td
                                input.ms.color#not-u(type='radio' autocomplete='off' name='u' data-operator='not')
                                label.ms.ms-cost.ms-u.ms-2x(for='not-u')
                            td
                                input.ms.color#not-b(type='radio' autocomplete='off' name='b' data-operator='not')
                                label.ms.ms-cost.ms-b.ms-2x(for='not-b')
                            td
                                input.ms.color#not-r(type='radio' autocomplete='off' name='r' data-operator='not')
                                label.ms.ms-cost.ms-r.ms-2x(for='not-r')
                            td
                                input.ms.color#not-g(type='radio' autocomplete='off' name='g' data-operator='not')
                                label.ms.ms-cost.ms-g.ms-2x(for='not-g')
                .input-group-btn.hidden
                    a.btn.btn-success.addColorIdentity
                        .glyphicon.glyphicon-plus
        .form-group
            label Name
            .input-group(data-field='name' data-field-name='Name')
                select.selectpicker.operator
                    option(value='and') And
                    option(value='or') Or
                    option(value='not') Not
                input.form-control.value(type='text' placeholder='Name')
                .input-group-btn
                    a.btn.btn-success.addQuery
                        .glyphicon.glyphicon-plus
        .form-group
            label Oracle Text
            .input-group(data-field='text' data-field-name='Oracle Text')
                select.selectpicker.operator
                    option(value='and') And
                    option(value='or') Or
                    option(value='not') Not
                input.form-control.value(type='text' placeholder='Oracle text')
                .input-group-btn
                    a.btn.btn-success.addQuery
                        .glyphicon.glyphicon-plus
        .form-group
            label Supertype
            .input-group(data-field='supertypes' data-field-name='Supertype')
                select.selectpicker.operator
                    option(value='and') And
                    option(value='or') Or
                    option(value='not') Not
                select.form-control.selectpicker.value#supertype(data-live-search='true' data-none-selected-text='Supertype')
                    option(value='')
                    each supertype in supertypes
                        option #{supertype.description}
                .input-group-btn
                    a.btn.btn-success.addQuery
                        .glyphicon.glyphicon-plus
        .form-group
            label Type
            .input-group(data-field='types' data-field-name='Type')
                select.selectpicker.operator
                    option(value='and') And
                    option(value='or') Or
                    option(value='not') Not
                select.form-control.selectpicker.value#type(data-live-search='true' data-none-selected-text='Type')
                    option(value='')
                    each type in types
                        option #{type.description}
                .input-group-btn
                    a.btn.btn-success.addQuery
                        .glyphicon.glyphicon-plus
        .form-group
            label Subtype
            .input-group(data-field='subtypes' data-field-name='Subtype')
                select.selectpicker.operator
                    option(value='and') And
                    option(value='or') Or
                    option(value='not') Not
                select.form-control.selectpicker.value#subtype(data-live-search='true' data-none-selected-text='Subtype')
                    option(value='')
                    each subtype in subtypes
                        option #{subtype.description}
                .input-group-btn
                    a.btn.btn-success.addQuery
                        .glyphicon.glyphicon-plus
        .form-group
            label Order
            .input-group(data-field='order' data-field-name='Order')
                select.selectpicker.operator
                    option(value='ascending') Ascending
                    option(value='descending') Descending
                select.form-control.selectpicker.value#order(data-live-search='true' data-none-selected-text='Order')
                    option(value='')
                    option(value='Name') Name
                    option(value='CMC') CMC
                    option(value='Power') Power
                    option(value='Toughness') Toughness
                .input-group-btn
                    a.btn.btn-success.addQuery
                        .glyphicon.glyphicon-plus

    .col-md-4.col-xs-12
        if process.env.DEVELOPMENT === 'true'
            label(for='queryPreview') Query
            pre#queryPreview
        label(for='queryPreview2') Query 2.0
            div#queryPreview2
        form#form(action='/results' method='get')
            //input#query(type='hidden' name='query' value='%7B%7D')
            input(type='hidden' name='page' value='1')
            .form-group.btn-toolbar
                button.btn.btn-primary(type='submit') Search
                a.btn.btn-danger(type='submit' onclick='removeAllClauses();') Clear
    script(type='text/javascript').
        function getQueryJson() {
            if (Cookies.get('query') === undefined)
                setQueryJson({});
            return JSON.parse(Cookies.get('query'));
        }

        function setQueryJson(json) {
            Cookies.set('query', JSON.stringify(json));
            updateQueryPreview();
        }

        function addColorIdentity(event) {
            var inputGroup = $(this).closest('.input-group');
            var colors = inputGroup.find('.color:checked');

            var query = getQueryJson();
            if (query === null || query === undefined || query === '')
                query = {};

            for (var i = 0; i < colors.length; i++) {
                var color = $(colors[i]);

                query[color.attr('name')] = {
                    field: inputGroup.data('field'),
                    operator: color.data('operator'),
                    value: color.attr('name')
                };
            }

            setQueryJson(query);
            console.log(query);
        }

        function addClause(event) {
            console.log('event:', event);
            console.log('this:', this);

            var inputGroup = $(this).closest('.input-group');
            var value = inputGroup.find('.value').not('div');

            if (value.val() === undefined || value.val() === null || value.val() === '')
                return;

            var string = value.val();
            value.val('');
            inputGroup.find('.selectpicker.value').selectpicker('val', null);

            var values = [];
            var quotedText = /["|']([^"']+)["|']/g;
            var match = quotedText.exec(string);

            while (match != null) {
                values.push(match[1]);
                match = quotedText.exec(string);
            }

            values = values.concat(string.replace(quotedText, '').split(' '));

            var query = getQueryJson();
            if (query === null || query === undefined || query === '')
                query = {};

            for (var i = 0; i < values.length; i++) {
                var val = values[i];
                if (val === undefined || val === null || val === '')
                    continue;
                query[createGuid()] = {
                    field: inputGroup.data('field'),
                    operator: inputGroup.find('.operator.selectpicker').val(),
                    comparator: inputGroup.find('.comparator.selectpicker').val(),
                    value: val
                };
            }

            setQueryJson(query);

            console.log(query);
        }

        function removeClause(key) {
            var query = getQueryJson();

            if (query === null || query === undefined || query === '')
                query = {};

            if (query.hasOwnProperty(key)) {
                delete query[key];
            }

            setQueryJson(query);
        }

        function removeAllClauses() {
            setQueryJson({});
        }

        function updateQueryPreview() {
            $('#queryPreview').text(JSON.stringify(getQueryJson(), null, 2));

            var query = getQueryJson();

            var queryPreview = $('#queryPreview2');

            queryPreview.empty();

            for (var key in query) {
                if (query.hasOwnProperty(key)) {

                    var clause = query[key];

                    if (clause.field === 'coloridentity') {
                        /*
                         This is handled by updateColorIdentity
                         */
                        continue;
                    }
                    else {
                        var kill = "<a class='glyphicon glyphicon-remove-sign pointer' onclick='removeClause(\"" + key + "\")'></a>";
                        var field = clause.field.replace(/\w\S*/g, function (txt) {
                            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                        });
                        var operator = clause.operator.toUpperCase();
                        var value = clause.value;
                        var child = '<div class="form-group">' + kill + ' ' + field + ' ' + operator + ' \'' + value + '\'</div>';

                        queryPreview.append(child);
                    }
                }
            }

            updateColorIdentity();
        }

        function updateColorIdentity() {
            var json = getQueryJson();
            var colors = ['r', 'w', 'g', 'b', 'u'];
            for (var i = 0; i < colors.length; i++) {
                if (json.hasOwnProperty(colors[i])) {
                    var clause = json[colors[i]];

                    if (clause.operator === 'and') {
                        $('#and-' + colors[i]).prop('checked', true);
                    }
                    else if (clause.operator === 'not') {
                        $('#not-' + colors[i]).prop('checked', true);
                    }
                    else {
                        $('#or-' + colors[i]).prop('checked', true);
                    }
                }
                else {
                    $('#or-' + colors[i]).prop('checked', true);
                }
            }
        }

        $(document).ready(function () {
            updateQueryPreview();

            $('.addQuery').click(addClause);

            $('.addColorIdentity').click(addColorIdentity);


            $('.value').keyup(function (event) {
                if (event.keyCode == 13) {
                    $(this).closest('.input-group').find('.btn.btn-success.addQuery').click();
                }
            });

            $("#form").submit(function (event) {
                $('.addQuery').click();
                $('.addColorIdentity').click();
            });

        });
